; ModuleID = 'wasm/myvprintf.c'
source_filename = "wasm/myvprintf.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32"

@.str = private unnamed_addr constant [7 x i8] c"'-+ #0\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"hljzt\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@put_integer.symbols_s = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@put_integer.symbols_c = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), align 4
@.str.4 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1

; Function Attrs: noinline nounwind
define hidden void @myvprintf(i8** %dst, i8* %fmt, i8* %ap) #0 {
entry:
  %dst.addr = alloca i8**, align 4
  %fmt.addr = alloca i8*, align 4
  %ap.addr = alloca i8*, align 4
  %ui = alloca i64, align 8
  %i = alloca i64, align 8
  %s = alloca i8*, align 4
  %d = alloca double, align 8
  %sign = alloca i32, align 4
  %flags = alloca i32, align 4
  %length = alloca i32, align 4
  %precision = alloca i32, align 4
  %tmp = alloca i32, align 4
  %int_type = alloca i32, align 4
  store i8** %dst, i8*** %dst.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i8* %ap, i8** %ap.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog161, %entry
  store i8* null, i8** %s, align 4
  store double 0.000000e+00, double* %d, align 8
  store i32 0, i32* %sign, align 4
  store i32 0, i32* %flags, align 4
  store i32 0, i32* %length, align 4
  store i32 0, i32* %precision, align 4
  store i32 0, i32* %tmp, align 4
  store i32 0, i32* %int_type, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.cond
  %0 = load i8*, i8** %fmt.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %fmt.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv2, 37
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %fmt.addr, align 4
  %6 = load i8, i8* %5, align 1
  %7 = load i8**, i8*** %dst.addr, align 4
  %8 = load i8*, i8** %7, align 4
  store i8 %6, i8* %8, align 1
  %9 = load i8**, i8*** %dst.addr, align 4
  %10 = load i8*, i8** %9, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr4, i8** %9, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  %11 = load i8*, i8** %fmt.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv5 = sext i8 %12 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %ap.addr8 = bitcast i8** %ap.addr to i8*
  call void @llvm.va_end(i8* %ap.addr8)
  br label %for.end

if.end:                                           ; preds = %while.end
  %13 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr9, i8** %fmt.addr, align 4
  br label %while.cond10

while.cond10:                                     ; preds = %sw.epilog, %if.end
  %14 = load i8*, i8** %fmt.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv11 = sext i8 %15 to i32
  %call = call i8* @strchr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 %conv11)
  %tobool12 = icmp ne i8* %call, null
  br i1 %tobool12, label %while.body13, label %while.end26

while.body13:                                     ; preds = %while.cond10
  %16 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr14 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr14, i8** %fmt.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv15 = sext i8 %17 to i32
  switch i32 %conv15, label %sw.epilog [
    i32 39, label %sw.bb
    i32 45, label %sw.bb16
    i32 43, label %sw.bb18
    i32 35, label %sw.bb20
    i32 48, label %sw.bb22
    i32 32, label %sw.bb24
  ]

sw.bb:                                            ; preds = %while.body13
  %18 = load i32, i32* %flags, align 4
  %or = or i32 %18, 8
  store i32 %or, i32* %flags, align 4
  br label %sw.epilog

sw.bb16:                                          ; preds = %while.body13
  %19 = load i32, i32* %flags, align 4
  %or17 = or i32 %19, 64
  store i32 %or17, i32* %flags, align 4
  br label %sw.epilog

sw.bb18:                                          ; preds = %while.body13
  %20 = load i32, i32* %flags, align 4
  %or19 = or i32 %20, 32
  store i32 %or19, i32* %flags, align 4
  store i32 43, i32* %sign, align 4
  br label %sw.epilog

sw.bb20:                                          ; preds = %while.body13
  %21 = load i32, i32* %flags, align 4
  %or21 = or i32 %21, 4
  store i32 %or21, i32* %flags, align 4
  br label %sw.epilog

sw.bb22:                                          ; preds = %while.body13
  %22 = load i32, i32* %flags, align 4
  %or23 = or i32 %22, 2
  store i32 %or23, i32* %flags, align 4
  br label %sw.epilog

sw.bb24:                                          ; preds = %while.body13
  %23 = load i32, i32* %flags, align 4
  %or25 = or i32 %23, 32
  store i32 %or25, i32* %flags, align 4
  store i32 32, i32* %sign, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body13, %sw.bb24, %sw.bb22, %sw.bb20, %sw.bb18, %sw.bb16, %sw.bb
  br label %while.cond10

while.end26:                                      ; preds = %while.cond10
  %24 = load i8*, i8** %fmt.addr, align 4
  %25 = load i8, i8* %24, align 1
  %conv27 = sext i8 %25 to i32
  %cmp28 = icmp eq i32 %conv27, 42
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %while.end26
  %argp.cur = load i8*, i8** %ap.addr, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %ap.addr, align 4
  %26 = bitcast i8* %argp.cur to i32*
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %length, align 4
  %28 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr31 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr31, i8** %fmt.addr, align 4
  br label %if.end45

if.else:                                          ; preds = %while.end26
  br label %while.cond32

while.cond32:                                     ; preds = %while.body41, %if.else
  %29 = load i8*, i8** %fmt.addr, align 4
  %30 = load i8, i8* %29, align 1
  %conv33 = sext i8 %30 to i32
  %cmp34 = icmp sge i32 %conv33, 48
  br i1 %cmp34, label %land.rhs36, label %land.end40

land.rhs36:                                       ; preds = %while.cond32
  %31 = load i8*, i8** %fmt.addr, align 4
  %32 = load i8, i8* %31, align 1
  %conv37 = sext i8 %32 to i32
  %cmp38 = icmp sle i32 %conv37, 57
  br label %land.end40

land.end40:                                       ; preds = %land.rhs36, %while.cond32
  %33 = phi i1 [ false, %while.cond32 ], [ %cmp38, %land.rhs36 ]
  br i1 %33, label %while.body41, label %while.end44

while.body41:                                     ; preds = %land.end40
  %34 = load i32, i32* %length, align 4
  %mul = mul nsw i32 %34, 10
  %35 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr42 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr42, i8** %fmt.addr, align 4
  %36 = load i8, i8* %35, align 1
  %conv43 = sext i8 %36 to i32
  %sub = sub nsw i32 %conv43, 48
  %add = add nsw i32 %mul, %sub
  store i32 %add, i32* %length, align 4
  br label %while.cond32

while.end44:                                      ; preds = %land.end40
  br label %if.end45

if.end45:                                         ; preds = %while.end44, %if.then30
  %37 = load i8*, i8** %fmt.addr, align 4
  %38 = load i8, i8* %37, align 1
  %conv46 = sext i8 %38 to i32
  %cmp47 = icmp eq i32 %conv46, 46
  br i1 %cmp47, label %if.then49, label %if.end76

if.then49:                                        ; preds = %if.end45
  %39 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr50, i8** %fmt.addr, align 4
  %40 = load i8*, i8** %fmt.addr, align 4
  %41 = load i8, i8* %40, align 1
  %conv51 = sext i8 %41 to i32
  %cmp52 = icmp eq i32 %conv51, 42
  br i1 %cmp52, label %if.then54, label %if.else58

if.then54:                                        ; preds = %if.then49
  %42 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr55 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr55, i8** %fmt.addr, align 4
  %argp.cur56 = load i8*, i8** %ap.addr, align 4
  %argp.next57 = getelementptr inbounds i8, i8* %argp.cur56, i32 4
  store i8* %argp.next57, i8** %ap.addr, align 4
  %43 = bitcast i8* %argp.cur56 to i32*
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %precision, align 4
  br label %if.end75

if.else58:                                        ; preds = %if.then49
  br label %while.cond59

while.cond59:                                     ; preds = %while.body68, %if.else58
  %45 = load i8*, i8** %fmt.addr, align 4
  %46 = load i8, i8* %45, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp sge i32 %conv60, 48
  br i1 %cmp61, label %land.rhs63, label %land.end67

land.rhs63:                                       ; preds = %while.cond59
  %47 = load i8*, i8** %fmt.addr, align 4
  %48 = load i8, i8* %47, align 1
  %conv64 = sext i8 %48 to i32
  %cmp65 = icmp sle i32 %conv64, 57
  br label %land.end67

land.end67:                                       ; preds = %land.rhs63, %while.cond59
  %49 = phi i1 [ false, %while.cond59 ], [ %cmp65, %land.rhs63 ]
  br i1 %49, label %while.body68, label %while.end74

while.body68:                                     ; preds = %land.end67
  %50 = load i32, i32* %precision, align 4
  %mul69 = mul nsw i32 %50, 10
  %51 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr70 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr70, i8** %fmt.addr, align 4
  %52 = load i8, i8* %51, align 1
  %conv71 = sext i8 %52 to i32
  %sub72 = sub nsw i32 %conv71, 48
  %add73 = add nsw i32 %mul69, %sub72
  store i32 %add73, i32* %precision, align 4
  br label %while.cond59

while.end74:                                      ; preds = %land.end67
  br label %if.end75

if.end75:                                         ; preds = %while.end74, %if.then54
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.end45
  br label %while.cond77

while.cond77:                                     ; preds = %sw.epilog87, %if.end76
  %53 = load i8*, i8** %fmt.addr, align 4
  %54 = load i8, i8* %53, align 1
  %conv78 = sext i8 %54 to i32
  %call79 = call i8* @strchr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv78)
  %tobool80 = icmp ne i8* %call79, null
  br i1 %tobool80, label %while.body81, label %while.end88

while.body81:                                     ; preds = %while.cond77
  %55 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr82 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr82, i8** %fmt.addr, align 4
  %56 = load i8, i8* %55, align 1
  %conv83 = sext i8 %56 to i32
  switch i32 %conv83, label %sw.epilog87 [
    i32 104, label %sw.bb84
    i32 108, label %sw.bb85
    i32 106, label %sw.bb86
    i32 122, label %sw.bb86
    i32 116, label %sw.bb86
  ]

sw.bb84:                                          ; preds = %while.body81
  %57 = load i32, i32* %int_type, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %int_type, align 4
  br label %sw.epilog87

sw.bb85:                                          ; preds = %while.body81
  %58 = load i32, i32* %int_type, align 4
  %inc = add nsw i32 %58, 1
  store i32 %inc, i32* %int_type, align 4
  br label %sw.epilog87

sw.bb86:                                          ; preds = %while.body81, %while.body81, %while.body81
  store i32 1, i32* %int_type, align 4
  br label %sw.epilog87

sw.epilog87:                                      ; preds = %while.body81, %sw.bb86, %sw.bb85, %sw.bb84
  br label %while.cond77

while.end88:                                      ; preds = %while.cond77
  %59 = load i8*, i8** %fmt.addr, align 4
  %60 = load i8, i8* %59, align 1
  %conv89 = sext i8 %60 to i32
  switch i32 %conv89, label %sw.default [
    i32 100, label %sw.bb90
    i32 105, label %sw.bb90
    i32 117, label %sw.bb98
    i32 111, label %sw.bb101
    i32 112, label %sw.bb104
    i32 88, label %sw.bb105
    i32 120, label %sw.bb107
    i32 99, label %sw.bb110
    i32 115, label %sw.bb114
    i32 37, label %sw.bb152
  ]

sw.bb90:                                          ; preds = %while.end88, %while.end88
  %61 = load i8*, i8** %ap.addr, align 4
  %62 = load i32, i32* %int_type, align 4
  %call91 = call i64 @get_signed(i8* %61, i32 %62)
  store i64 %call91, i64* %i, align 8
  %63 = load i64, i64* %i, align 8
  %cmp92 = icmp slt i64 %63, 0
  br i1 %cmp92, label %if.then94, label %if.end96

if.then94:                                        ; preds = %sw.bb90
  %64 = load i64, i64* %i, align 8
  %sub95 = sub nsw i64 0, %64
  store i64 %sub95, i64* %i, align 8
  store i32 45, i32* %sign, align 4
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %sw.bb90
  %65 = load i8**, i8*** %dst.addr, align 4
  %66 = load i64, i64* %i, align 8
  %67 = load i32, i32* %length, align 4
  %68 = load i32, i32* %sign, align 4
  %conv97 = trunc i32 %68 to i8
  %69 = load i32, i32* %flags, align 4
  call void @put_integer(i8** %65, i64 %66, i32 10, i32 %67, i8 signext %conv97, i32 %69)
  br label %sw.epilog161

sw.bb98:                                          ; preds = %while.end88
  %70 = load i8*, i8** %ap.addr, align 4
  %71 = load i32, i32* %int_type, align 4
  %call99 = call i64 @get_unsigned(i8* %70, i32 %71)
  store i64 %call99, i64* %ui, align 8
  %72 = load i8**, i8*** %dst.addr, align 4
  %73 = load i64, i64* %ui, align 8
  %74 = load i32, i32* %length, align 4
  %75 = load i32, i32* %sign, align 4
  %conv100 = trunc i32 %75 to i8
  %76 = load i32, i32* %flags, align 4
  call void @put_integer(i8** %72, i64 %73, i32 10, i32 %74, i8 signext %conv100, i32 %76)
  br label %sw.epilog161

sw.bb101:                                         ; preds = %while.end88
  %77 = load i8*, i8** %ap.addr, align 4
  %78 = load i32, i32* %int_type, align 4
  %call102 = call i64 @get_unsigned(i8* %77, i32 %78)
  store i64 %call102, i64* %ui, align 8
  %79 = load i8**, i8*** %dst.addr, align 4
  %80 = load i64, i64* %ui, align 8
  %81 = load i32, i32* %length, align 4
  %82 = load i32, i32* %sign, align 4
  %conv103 = trunc i32 %82 to i8
  %83 = load i32, i32* %flags, align 4
  call void @put_integer(i8** %79, i64 %80, i32 8, i32 %81, i8 signext %conv103, i32 %83)
  br label %sw.epilog161

sw.bb104:                                         ; preds = %while.end88
  store i32 8, i32* %length, align 4
  store i32 1, i32* %int_type, align 4
  store i32 0, i32* %sign, align 4
  store i32 6, i32* %flags, align 4
  br label %sw.bb105

sw.bb105:                                         ; preds = %while.end88, %sw.bb104
  %84 = load i32, i32* %flags, align 4
  %or106 = or i32 %84, 16
  store i32 %or106, i32* %flags, align 4
  br label %sw.bb107

sw.bb107:                                         ; preds = %while.end88, %sw.bb105
  %85 = load i8*, i8** %ap.addr, align 4
  %86 = load i32, i32* %int_type, align 4
  %call108 = call i64 @get_unsigned(i8* %85, i32 %86)
  store i64 %call108, i64* %ui, align 8
  %87 = load i8**, i8*** %dst.addr, align 4
  %88 = load i64, i64* %ui, align 8
  %89 = load i32, i32* %length, align 4
  %90 = load i32, i32* %sign, align 4
  %conv109 = trunc i32 %90 to i8
  %91 = load i32, i32* %flags, align 4
  call void @put_integer(i8** %87, i64 %88, i32 16, i32 %89, i8 signext %conv109, i32 %91)
  br label %sw.epilog161

sw.bb110:                                         ; preds = %while.end88
  %92 = load i8*, i8** %ap.addr, align 4
  %call111 = call i64 @get_signed(i8* %92, i32 -2)
  store i64 %call111, i64* %i, align 8
  %93 = load i64, i64* %i, align 8
  %conv112 = trunc i64 %93 to i8
  %94 = load i8**, i8*** %dst.addr, align 4
  %95 = load i8*, i8** %94, align 4
  store i8 %conv112, i8* %95, align 1
  %96 = load i8**, i8*** %dst.addr, align 4
  %97 = load i8*, i8** %96, align 4
  %incdec.ptr113 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr113, i8** %96, align 4
  br label %sw.epilog161

sw.bb114:                                         ; preds = %while.end88
  %argp.cur115 = load i8*, i8** %ap.addr, align 4
  %argp.next116 = getelementptr inbounds i8, i8* %argp.cur115, i32 4
  store i8* %argp.next116, i8** %ap.addr, align 4
  %98 = bitcast i8* %argp.cur115 to i8**
  %99 = load i8*, i8** %98, align 4
  store i8* %99, i8** %s, align 4
  %100 = load i8*, i8** %s, align 4
  %cmp117 = icmp eq i8* %100, null
  br i1 %cmp117, label %if.then119, label %if.end120

if.then119:                                       ; preds = %sw.bb114
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8** %s, align 4
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %sw.bb114
  %101 = load i8*, i8** %s, align 4
  %call121 = call i32 @strlen(i8* %101)
  store i32 %call121, i32* %tmp, align 4
  %102 = load i32, i32* %precision, align 4
  %tobool122 = icmp ne i32 %102, 0
  br i1 %tobool122, label %land.lhs.true, label %if.end126

land.lhs.true:                                    ; preds = %if.end120
  %103 = load i32, i32* %precision, align 4
  %104 = load i32, i32* %tmp, align 4
  %cmp123 = icmp slt i32 %103, %104
  br i1 %cmp123, label %if.then125, label %if.end126

if.then125:                                       ; preds = %land.lhs.true
  %105 = load i32, i32* %precision, align 4
  store i32 %105, i32* %tmp, align 4
  br label %if.end126

if.end126:                                        ; preds = %if.then125, %land.lhs.true, %if.end120
  %106 = load i32, i32* %length, align 4
  %107 = load i32, i32* %tmp, align 4
  %sub127 = sub nsw i32 %106, %107
  store i32 %sub127, i32* %length, align 4
  %108 = load i32, i32* %flags, align 4
  %and = and i32 %108, 64
  %tobool128 = icmp ne i32 %and, 0
  br i1 %tobool128, label %if.end137, label %if.then129

if.then129:                                       ; preds = %if.end126
  br label %while.cond130

while.cond130:                                    ; preds = %while.body133, %if.then129
  %109 = load i32, i32* %length, align 4
  %cmp131 = icmp sgt i32 %109, 0
  br i1 %cmp131, label %while.body133, label %while.end136

while.body133:                                    ; preds = %while.cond130
  %110 = load i32, i32* %length, align 4
  %dec134 = add nsw i32 %110, -1
  store i32 %dec134, i32* %length, align 4
  %111 = load i8**, i8*** %dst.addr, align 4
  %112 = load i8*, i8** %111, align 4
  store i8 32, i8* %112, align 1
  %113 = load i8**, i8*** %dst.addr, align 4
  %114 = load i8*, i8** %113, align 4
  %incdec.ptr135 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr135, i8** %113, align 4
  br label %while.cond130

while.end136:                                     ; preds = %while.cond130
  br label %if.end137

if.end137:                                        ; preds = %while.end136, %if.end126
  br label %while.cond138

while.cond138:                                    ; preds = %while.body141, %if.end137
  %115 = load i32, i32* %tmp, align 4
  %dec139 = add nsw i32 %115, -1
  store i32 %dec139, i32* %tmp, align 4
  %tobool140 = icmp ne i32 %115, 0
  br i1 %tobool140, label %while.body141, label %while.end144

while.body141:                                    ; preds = %while.cond138
  %116 = load i8*, i8** %s, align 4
  %incdec.ptr142 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr142, i8** %s, align 4
  %117 = load i8, i8* %116, align 1
  %118 = load i8**, i8*** %dst.addr, align 4
  %119 = load i8*, i8** %118, align 4
  store i8 %117, i8* %119, align 1
  %120 = load i8**, i8*** %dst.addr, align 4
  %121 = load i8*, i8** %120, align 4
  %incdec.ptr143 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %incdec.ptr143, i8** %120, align 4
  br label %while.cond138

while.end144:                                     ; preds = %while.cond138
  br label %while.cond145

while.cond145:                                    ; preds = %while.body149, %while.end144
  %122 = load i32, i32* %length, align 4
  %dec146 = add nsw i32 %122, -1
  store i32 %dec146, i32* %length, align 4
  %cmp147 = icmp sgt i32 %122, 0
  br i1 %cmp147, label %while.body149, label %while.end151

while.body149:                                    ; preds = %while.cond145
  %123 = load i8**, i8*** %dst.addr, align 4
  %124 = load i8*, i8** %123, align 4
  store i8 32, i8* %124, align 1
  %125 = load i8**, i8*** %dst.addr, align 4
  %126 = load i8*, i8** %125, align 4
  %incdec.ptr150 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr150, i8** %125, align 4
  br label %while.cond145

while.end151:                                     ; preds = %while.cond145
  br label %sw.epilog161

sw.bb152:                                         ; preds = %while.end88
  %127 = load i8**, i8*** %dst.addr, align 4
  %128 = load i8*, i8** %127, align 4
  store i8 37, i8* %128, align 1
  %129 = load i8**, i8*** %dst.addr, align 4
  %130 = load i8*, i8** %129, align 4
  %incdec.ptr153 = getelementptr inbounds i8, i8* %130, i32 1
  store i8* %incdec.ptr153, i8** %129, align 4
  br label %sw.epilog161

sw.default:                                       ; preds = %while.end88
  br label %while.cond154

while.cond154:                                    ; preds = %while.body158, %sw.default
  %131 = load i8*, i8** %fmt.addr, align 4
  %132 = load i8, i8* %131, align 1
  %conv155 = sext i8 %132 to i32
  %cmp156 = icmp ne i32 %conv155, 37
  br i1 %cmp156, label %while.body158, label %while.end160

while.body158:                                    ; preds = %while.cond154
  %133 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr159 = getelementptr inbounds i8, i8* %133, i32 -1
  store i8* %incdec.ptr159, i8** %fmt.addr, align 4
  br label %while.cond154

while.end160:                                     ; preds = %while.cond154
  br label %sw.epilog161

sw.epilog161:                                     ; preds = %while.end160, %sw.bb152, %while.end151, %sw.bb110, %sw.bb107, %sw.bb101, %sw.bb98, %if.end96
  %134 = load i8*, i8** %fmt.addr, align 4
  %incdec.ptr162 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr162, i8** %fmt.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #1

declare i8* @strchr(i8*, i32) #2

; Function Attrs: noinline nounwind
define internal i64 @get_signed(i8* %ap, i32 %type) #0 {
entry:
  %retval = alloca i64, align 8
  %ap.addr = alloca i8*, align 4
  %type.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i8* %ap, i8** %ap.addr, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  store i32 %0, i32* %t, align 4
  %1 = load i32, i32* %t, align 4
  %cmp = icmp sge i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 2, i32* %t, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %t, align 4
  %cmp1 = icmp sle i32 %2, -2
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -2, i32* %t, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i32, i32* %t, align 4
  switch i32 %3, label %sw.epilog [
    i32 2, label %sw.bb
    i32 1, label %sw.bb4
    i32 0, label %sw.bb7
    i32 -1, label %sw.bb11
    i32 -2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end3
  %argp.cur = load i8*, i8** %ap.addr, align 4
  %4 = ptrtoint i8* %argp.cur to i32
  %5 = add i32 %4, 7
  %6 = and i32 %5, -8
  %argp.cur.aligned = inttoptr i32 %6 to i8*
  %argp.next = getelementptr inbounds i8, i8* %argp.cur.aligned, i32 8
  store i8* %argp.next, i8** %ap.addr, align 4
  %7 = bitcast i8* %argp.cur.aligned to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %if.end3
  %argp.cur5 = load i8*, i8** %ap.addr, align 4
  %argp.next6 = getelementptr inbounds i8, i8* %argp.cur5, i32 4
  store i8* %argp.next6, i8** %ap.addr, align 4
  %9 = bitcast i8* %argp.cur5 to i32*
  %10 = load i32, i32* %9, align 4
  %conv = sext i32 %10 to i64
  store i64 %conv, i64* %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %if.end3
  %argp.cur8 = load i8*, i8** %ap.addr, align 4
  %argp.next9 = getelementptr inbounds i8, i8* %argp.cur8, i32 4
  store i8* %argp.next9, i8** %ap.addr, align 4
  %11 = bitcast i8* %argp.cur8 to i32*
  %12 = load i32, i32* %11, align 4
  %conv10 = sext i32 %12 to i64
  store i64 %conv10, i64* %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %if.end3
  %argp.cur12 = load i8*, i8** %ap.addr, align 4
  %argp.next13 = getelementptr inbounds i8, i8* %argp.cur12, i32 4
  store i8* %argp.next13, i8** %ap.addr, align 4
  %13 = bitcast i8* %argp.cur12 to i32*
  %14 = load i32, i32* %13, align 4
  %conv14 = trunc i32 %14 to i16
  %conv15 = sext i16 %conv14 to i64
  store i64 %conv15, i64* %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %if.end3
  %argp.cur17 = load i8*, i8** %ap.addr, align 4
  %argp.next18 = getelementptr inbounds i8, i8* %argp.cur17, i32 4
  store i8* %argp.next18, i8** %ap.addr, align 4
  %15 = bitcast i8* %argp.cur17 to i32*
  %16 = load i32, i32* %15, align 4
  %conv19 = trunc i32 %16 to i8
  %conv20 = sext i8 %conv19 to i64
  store i64 %conv20, i64* %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %if.end3
  %argp.cur21 = load i8*, i8** %ap.addr, align 4
  %argp.next22 = getelementptr inbounds i8, i8* %argp.cur21, i32 4
  store i8* %argp.next22, i8** %ap.addr, align 4
  %17 = bitcast i8* %argp.cur21 to i32*
  %18 = load i32, i32* %17, align 4
  %conv23 = trunc i32 %18 to i8
  %conv24 = sext i8 %conv23 to i64
  store i64 %conv24, i64* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb16, %sw.bb11, %sw.bb7, %sw.bb4, %sw.bb
  %19 = load i64, i64* %retval, align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind
define internal void @put_integer(i8** %dst, i64 %n, i32 %radix, i32 %length, i8 signext %sign, i32 %flags) #0 {
entry:
  %dst.addr = alloca i8**, align 4
  %n.addr = alloca i64, align 8
  %radix.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  %sign.addr = alloca i8, align 1
  %flags.addr = alloca i32, align 4
  %buf = alloca [80 x i8], align 16
  %i = alloca i32, align 4
  %pad = alloca i32, align 4
  %symbols = alloca i8*, align 4
  store i8** %dst, i8*** %dst.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  store i32 %radix, i32* %radix.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  store i8 %sign, i8* %sign.addr, align 1
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 32, i32* %pad, align 4
  %0 = load i8*, i8** @put_integer.symbols_s, align 4
  store i8* %0, i8** %symbols, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** @put_integer.symbols_c, align 4
  store i8* %2, i8** %symbols, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %3 = load i8*, i8** %symbols, align 4
  %4 = load i64, i64* %n.addr, align 8
  %5 = load i32, i32* %radix.addr, align 4
  %conv = sext i32 %5 to i64
  %rem = urem i64 %4, %conv
  %idxprom = trunc i64 %rem to i32
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %7
  store i8 %6, i8* %arrayidx1, align 1
  %8 = load i32, i32* %flags.addr, align 4
  %and2 = and i32 %8, 8
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %do.body
  %9 = load i32, i32* %i, align 4
  %rem4 = srem i32 %9, 4
  %cmp = icmp eq i32 %rem4, 3
  br i1 %cmp, label %if.then6, label %if.end9

if.then6:                                         ; preds = %land.lhs.true
  %10 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %10
  store i8 44, i8* %arrayidx8, align 1
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %land.lhs.true, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end9
  %11 = load i32, i32* %radix.addr, align 4
  %conv10 = sext i32 %11 to i64
  %12 = load i64, i64* %n.addr, align 8
  %div = udiv i64 %12, %conv10
  store i64 %div, i64* %n.addr, align 8
  %tobool11 = icmp ne i64 %div, 0
  br i1 %tobool11, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %length.addr, align 4
  %sub = sub nsw i32 %14, %13
  store i32 %sub, i32* %length.addr, align 4
  %15 = load i32, i32* %flags.addr, align 4
  %and12 = and i32 %15, 64
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end24, label %if.then14

if.then14:                                        ; preds = %do.end
  %16 = load i32, i32* %flags.addr, align 4
  %and15 = and i32 %16, 2
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then14
  store i32 48, i32* %pad, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.then14
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end18
  %17 = load i32, i32* %length.addr, align 4
  %cmp19 = icmp sgt i32 %17, 0
  br i1 %cmp19, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %length.addr, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %length.addr, align 4
  %19 = load i32, i32* %pad, align 4
  %conv21 = trunc i32 %19 to i8
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %20
  store i8 %conv21, i8* %arrayidx23, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end24

if.end24:                                         ; preds = %while.end, %do.end
  %21 = load i8, i8* %sign.addr, align 1
  %conv25 = sext i8 %21 to i32
  %tobool26 = icmp ne i32 %conv25, 0
  br i1 %tobool26, label %land.lhs.true27, label %if.end33

land.lhs.true27:                                  ; preds = %if.end24
  %22 = load i32, i32* %radix.addr, align 4
  %cmp28 = icmp eq i32 %22, 10
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %land.lhs.true27
  %23 = load i8, i8* %sign.addr, align 1
  %24 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %24, 1
  store i32 %inc31, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %24
  store i8 %23, i8* %arrayidx32, align 1
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %land.lhs.true27, %if.end24
  %25 = load i32, i32* %flags.addr, align 4
  %and34 = and i32 %25, 4
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end51

if.then36:                                        ; preds = %if.end33
  %26 = load i32, i32* %radix.addr, align 4
  %cmp37 = icmp eq i32 %26, 8
  br i1 %cmp37, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.then36
  %27 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %27, 1
  store i32 %inc40, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %27
  store i8 48, i8* %arrayidx41, align 1
  br label %if.end50

if.else:                                          ; preds = %if.then36
  %28 = load i32, i32* %radix.addr, align 4
  %cmp42 = icmp eq i32 %28, 16
  br i1 %cmp42, label %if.then44, label %if.end49

if.then44:                                        ; preds = %if.else
  %29 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %29, 1
  store i32 %inc45, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %29
  store i8 120, i8* %arrayidx46, align 1
  %30 = load i32, i32* %i, align 4
  %inc47 = add nsw i32 %30, 1
  store i32 %inc47, i32* %i, align 4
  %arrayidx48 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %30
  store i8 48, i8* %arrayidx48, align 1
  br label %if.end49

if.end49:                                         ; preds = %if.then44, %if.else
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then39
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  br label %while.cond52

while.cond52:                                     ; preds = %while.body55, %if.end51
  %31 = load i32, i32* %i, align 4
  %cmp53 = icmp sgt i32 %31, 0
  br i1 %cmp53, label %while.body55, label %while.end58

while.body55:                                     ; preds = %while.cond52
  %32 = load i32, i32* %i, align 4
  %dec56 = add nsw i32 %32, -1
  store i32 %dec56, i32* %i, align 4
  %arrayidx57 = getelementptr inbounds [80 x i8], [80 x i8]* %buf, i32 0, i32 %dec56
  %33 = load i8, i8* %arrayidx57, align 1
  %34 = load i8**, i8*** %dst.addr, align 4
  %35 = load i8*, i8** %34, align 4
  store i8 %33, i8* %35, align 1
  %36 = load i8**, i8*** %dst.addr, align 4
  %37 = load i8*, i8** %36, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr, i8** %36, align 4
  br label %while.cond52

while.end58:                                      ; preds = %while.cond52
  br label %while.cond59

while.cond59:                                     ; preds = %while.body62, %while.end58
  %38 = load i32, i32* %length.addr, align 4
  %cmp60 = icmp sgt i32 %38, 0
  br i1 %cmp60, label %while.body62, label %while.end66

while.body62:                                     ; preds = %while.cond59
  %39 = load i32, i32* %length.addr, align 4
  %dec63 = add nsw i32 %39, -1
  store i32 %dec63, i32* %length.addr, align 4
  %40 = load i32, i32* %pad, align 4
  %conv64 = trunc i32 %40 to i8
  %41 = load i8**, i8*** %dst.addr, align 4
  %42 = load i8*, i8** %41, align 4
  store i8 %conv64, i8* %42, align 1
  %43 = load i8**, i8*** %dst.addr, align 4
  %44 = load i8*, i8** %43, align 4
  %incdec.ptr65 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr65, i8** %43, align 4
  br label %while.cond59

while.end66:                                      ; preds = %while.cond59
  ret void
}

; Function Attrs: noinline nounwind
define internal i64 @get_unsigned(i8* %ap, i32 %type) #0 {
entry:
  %retval = alloca i64, align 8
  %ap.addr = alloca i8*, align 4
  %type.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i8* %ap, i8** %ap.addr, align 4
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  store i32 %0, i32* %t, align 4
  %1 = load i32, i32* %t, align 4
  %cmp = icmp sge i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 2, i32* %t, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %t, align 4
  %cmp1 = icmp sle i32 %2, -2
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -2, i32* %t, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i32, i32* %t, align 4
  switch i32 %3, label %sw.epilog [
    i32 2, label %sw.bb
    i32 1, label %sw.bb4
    i32 0, label %sw.bb7
    i32 -1, label %sw.bb11
    i32 -2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end3
  %argp.cur = load i8*, i8** %ap.addr, align 4
  %4 = ptrtoint i8* %argp.cur to i32
  %5 = add i32 %4, 7
  %6 = and i32 %5, -8
  %argp.cur.aligned = inttoptr i32 %6 to i8*
  %argp.next = getelementptr inbounds i8, i8* %argp.cur.aligned, i32 8
  store i8* %argp.next, i8** %ap.addr, align 4
  %7 = bitcast i8* %argp.cur.aligned to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %if.end3
  %argp.cur5 = load i8*, i8** %ap.addr, align 4
  %argp.next6 = getelementptr inbounds i8, i8* %argp.cur5, i32 4
  store i8* %argp.next6, i8** %ap.addr, align 4
  %9 = bitcast i8* %argp.cur5 to i32*
  %10 = load i32, i32* %9, align 4
  %conv = zext i32 %10 to i64
  store i64 %conv, i64* %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %if.end3
  %argp.cur8 = load i8*, i8** %ap.addr, align 4
  %argp.next9 = getelementptr inbounds i8, i8* %argp.cur8, i32 4
  store i8* %argp.next9, i8** %ap.addr, align 4
  %11 = bitcast i8* %argp.cur8 to i32*
  %12 = load i32, i32* %11, align 4
  %conv10 = zext i32 %12 to i64
  store i64 %conv10, i64* %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %if.end3
  %argp.cur12 = load i8*, i8** %ap.addr, align 4
  %argp.next13 = getelementptr inbounds i8, i8* %argp.cur12, i32 4
  store i8* %argp.next13, i8** %ap.addr, align 4
  %13 = bitcast i8* %argp.cur12 to i32*
  %14 = load i32, i32* %13, align 4
  %conv14 = trunc i32 %14 to i16
  %conv15 = zext i16 %conv14 to i64
  store i64 %conv15, i64* %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %if.end3
  %argp.cur17 = load i8*, i8** %ap.addr, align 4
  %argp.next18 = getelementptr inbounds i8, i8* %argp.cur17, i32 4
  store i8* %argp.next18, i8** %ap.addr, align 4
  %15 = bitcast i8* %argp.cur17 to i32*
  %16 = load i32, i32* %15, align 4
  %conv19 = trunc i32 %16 to i8
  %conv20 = zext i8 %conv19 to i64
  store i64 %conv20, i64* %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %if.end3
  %argp.cur21 = load i8*, i8** %ap.addr, align 4
  %argp.next22 = getelementptr inbounds i8, i8* %argp.cur21, i32 4
  store i8* %argp.next22, i8** %ap.addr, align 4
  %17 = bitcast i8* %argp.cur21 to i32*
  %18 = load i32, i32* %17, align 4
  %conv23 = trunc i32 %18 to i8
  %conv24 = zext i8 %conv23 to i64
  store i64 %conv24, i64* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb16, %sw.bb11, %sw.bb7, %sw.bb4, %sw.bb
  %19 = load i64, i64* %retval, align 8
  ret i64 %19
}

declare i32 @strlen(i8*) #2

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 5.0.0 (http://llvm.org/git/clang.git 01734df77696b4d9ba1debc1823b29673cae6a6c) (http://llvm.org/git/llvm.git c67ef6aaf75865024462576a5b790e46ccc2e75e)"}
