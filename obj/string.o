; ModuleID = 'wasm/string.c'
source_filename = "wasm/string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32"

; Function Attrs: noinline nounwind
define hidden i32 @strlen(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %n, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind
define hidden i32 @strcmp(i8* %buf1, i8* %buf2) #0 {
entry:
  %retval = alloca i32, align 4
  %buf1.addr = alloca i8*, align 4
  %buf2.addr = alloca i8*, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %buf1, i8** %buf1.addr, align 4
  store i8* %buf2, i8** %buf2.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end5, %entry
  %0 = load i8*, i8** %buf1.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %buf1.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %3 = load i8*, i8** %buf2.addr, align 4
  %incdec.ptr1 = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr1, i8** %buf2.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %sub = sub nsw i32 %2, %conv2
  store i32 %sub, i32* %c, align 4
  %5 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  %6 = load i32, i32* %c, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.cond
  %7 = load i32, i32* %n, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  br label %for.cond

return:                                           ; preds = %if.then4, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind
define hidden i32 @strncmp(i8* %buf1, i8* %buf2, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %buf1.addr = alloca i8*, align 4
  %buf2.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %buf1, i8** %buf1.addr, align 4
  store i8* %buf2, i8** %buf2.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %buf1.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %buf1.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  store i32 %conv, i32* %n, align 4
  %4 = load i32, i32* %n, align 4
  %5 = load i8*, i8** %buf2.addr, align 4
  %incdec.ptr1 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr1, i8** %buf2.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %sub = sub nsw i32 %4, %conv2
  store i32 %sub, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %c, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %n, align 4
  %tobool3 = icmp ne i32 %9, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then4, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind
define hidden i8* @strchr(i8* %s, i32 %c) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %c.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %conv, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  store i8* %5, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %7 = load i8*, i8** %retval, align 4
  ret i8* %7
}

; Function Attrs: noinline nounwind
define hidden i8* @strstr(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i8*, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s2.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end16, %if.end
  %2 = load i8*, i8** %s1.addr, align 4
  store i8* %2, i8** %p1, align 4
  %3 = load i8*, i8** %s2.addr, align 4
  store i8* %3, i8** %p2, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %if.end12, %for.cond
  %4 = load i8*, i8** %p1, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %p2, align 4
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %cmp = icmp ne i32 %conv, %conv2
  br i1 %cmp, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.cond1
  br label %for.end

if.end5:                                          ; preds = %for.cond1
  %8 = load i8*, i8** %p1, align 4
  %9 = load i8, i8* %8, align 1
  %tobool6 = icmp ne i8 %9, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end5
  br label %for.end

if.end8:                                          ; preds = %if.end5
  %10 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %11 = load i8*, i8** %p2, align 4
  %incdec.ptr9 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr9, i8** %p2, align 4
  %12 = load i8*, i8** %p2, align 4
  %13 = load i8, i8* %12, align 1
  %tobool10 = icmp ne i8 %13, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end8
  %14 = load i8*, i8** %s1.addr, align 4
  store i8* %14, i8** %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end8
  br label %for.cond1

for.end:                                          ; preds = %if.then7, %if.then4
  %15 = load i8*, i8** %s1.addr, align 4
  %incdec.ptr13 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr13, i8** %s1.addr, align 4
  %16 = load i8*, i8** %s1.addr, align 4
  %17 = load i8, i8* %16, align 1
  %tobool14 = icmp ne i8 %17, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %for.end
  br label %for.end17

if.end16:                                         ; preds = %for.end
  br label %for.cond

for.end17:                                        ; preds = %if.then15
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then11, %if.then
  %18 = load i8*, i8** %retval, align 4
  ret i8* %18
}

; Function Attrs: noinline nounwind
define hidden i8* @memcpy(i8* %dst, i8* %src, i32 %len) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %bk = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %dst.addr, align 4
  store i8* %0, i8** %bk, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 4
  %4 = load i8, i8* %3, align 1
  %5 = load i8*, i8** %dst.addr, align 4
  %incdec.ptr1 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr1, i8** %dst.addr, align 4
  store i8 %4, i8* %5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i8*, i8** %bk, align 4
  ret i8* %7
}

; Function Attrs: noinline nounwind
define hidden i8* @strcpy(i8* %dst, i8* %src) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %src.addr = alloca i8*, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %dst.addr, align 4
  %1 = load i8*, i8** %src.addr, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %call = call i32 @strlen(i8* %2)
  %add = add i32 %call, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* %1, i32 %add, i32 1, i1 false)
  ret i8* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #1

; Function Attrs: noinline nounwind
define hidden i8* @strdup(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %res = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0)
  %add = add i32 %call, 1
  %call1 = call i8* @calloc(i32 %add, i32 1)
  store i8* %call1, i8** %res, align 4
  %1 = load i8*, i8** %res, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3)
  %add3 = add i32 %call2, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* %2, i32 %add3, i32 1, i1 false)
  %4 = load i8*, i8** %res, align 4
  ret i8* %4
}

declare i8* @calloc(i32, i32) #2

; Function Attrs: noinline nounwind
define hidden i32 @sprintf(i8* %dst, i8* %fmt, ...) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %fmt.addr = alloca i8*, align 4
  %ap = alloca i8*, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  %ap1 = bitcast i8** %ap to i8*
  call void @llvm.va_start(i8* %ap1)
  %0 = load i8*, i8** %fmt.addr, align 4
  %1 = load i8*, i8** %ap, align 4
  call void @myvprintf(i8** %dst.addr, i8* %0, i8* %1)
  %ap2 = bitcast i8** %ap to i8*
  call void @llvm.va_end(i8* %ap2)
  %2 = load i8*, i8** %dst.addr, align 4
  store i8 0, i8* %2, align 1
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

declare void @myvprintf(i8**, i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 5.0.0 (http://llvm.org/git/clang.git 01734df77696b4d9ba1debc1823b29673cae6a6c) (http://llvm.org/git/llvm.git c67ef6aaf75865024462576a5b790e46ccc2e75e)"}
