; ModuleID = 'wasm/stdlib.c'
source_filename = "wasm/stdlib.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32"

@useheap = hidden global i32 0, align 4
@heap = hidden global [102400 x i8] zeroinitializer, align 16

; Function Attrs: noinline nounwind
define hidden i8* @calloc(i32 %n, i32 %cnt) #0 {
entry:
  %n.addr = alloca i32, align 4
  %cnt.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %cnt, i32* %cnt.addr, align 4
  %0 = load i32, i32* %cnt.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %1, %0
  store i32 %mul, i32* %n.addr, align 4
  %2 = load i32, i32* @useheap, align 4
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([102400 x i8], [102400 x i8]* @heap, i32 0, i32 0), i32 %2
  store i8* %add.ptr, i8** %p, align 4
  %3 = load i32, i32* %n.addr, align 4
  %4 = load i32, i32* @useheap, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* @useheap, align 4
  %5 = load i8*, i8** %p, align 4
  ret i8* %5
}

; Function Attrs: noinline nounwind
define hidden void @cfreeall() #0 {
entry:
  store i32 0, i32* @useheap, align 4
  ret void
}

; Function Attrs: noinline nounwind
define hidden i32 @atoi(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %flg = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 0, i32* %flg, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %flg, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv2, 43
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %5 = load i8*, i8** %s.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr6, i8** %s.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %if.end7
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr8 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr8, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv9 = sext i8 %7 to i32
  store i32 %conv9, i32* %c, align 4
  %8 = load i32, i32* %c, align 4
  %cmp10 = icmp slt i32 %8, 48
  br i1 %cmp10, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %9 = load i32, i32* %c, align 4
  %cmp12 = icmp sgt i32 %9, 57
  br i1 %cmp12, label %if.then14, label %if.end15

if.then14:                                        ; preds = %lor.lhs.false, %for.cond
  br label %for.end

if.end15:                                         ; preds = %lor.lhs.false
  %10 = load i32, i32* %n, align 4
  %mul = mul nsw i32 %10, 10
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 48
  %add = add nsw i32 %mul, %sub
  store i32 %add, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then14
  %12 = load i32, i32* %flg, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %13 = load i32, i32* %n, align 4
  %sub16 = sub nsw i32 0, %13
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %14 = load i32, i32* %n, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub16, %cond.true ], [ %14, %cond.false ]
  ret i32 %cond
}

attributes #0 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 5.0.0 (http://llvm.org/git/clang.git 01734df77696b4d9ba1debc1823b29673cae6a6c) (http://llvm.org/git/llvm.git c67ef6aaf75865024462576a5b790e46ccc2e75e)"}
